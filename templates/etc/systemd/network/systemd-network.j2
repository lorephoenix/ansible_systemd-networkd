# {{ ansible_managed }}
#
# Do not edit this file manually.
# Any changes will be automatically reverte
#
{# ############################################################################
   ############################################################################

  ██████╗ ██╗   ██╗██████╗ ██╗     ██╗ ██████╗        
  ██╔══██╗██║   ██║██╔══██╗██║     ██║██╔════╝        
  ██████╔╝██║   ██║██████╔╝██║     ██║██║             
  ██╔═══╝ ██║   ██║██╔══██╗██║     ██║██║             
  ██║     ╚██████╔╝██████╔╝███████╗██║╚██████╗        
  ╚═╝      ╚═════╝ ╚═════╝ ╚══════╝╚═╝ ╚═════╝        
                                                    
  ███╗   ███╗ █████╗  ██████╗██████╗  ██████╗ ███████╗
  ████╗ ████║██╔══██╗██╔════╝██╔══██╗██╔═══██╗██╔════╝
  ██╔████╔██║███████║██║     ██████╔╝██║   ██║███████╗
  ██║╚██╔╝██║██╔══██║██║     ██╔══██╗██║   ██║╚════██║
  ██║ ╚═╝ ██║██║  ██║╚██████╗██║  ██║╚██████╔╝███████║
  ╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝
  ############################################################################
  ############################################################################}
{%- macro PRESET(p, v) -%}
{%- set p = p|upper -%}
{%- set v = v|upper -%}
{%- if p == 'DHCP' and _workspace.DHCP is none -%}
  {%- set _workspace.DHCP = ((v|bool) | default(False) 
      | ternary( True, False)) -%}
  {%- if _workspace.DHCP -%}
    {%- if _dhcpv4 is defined and _dhcpv4 -%}
      {{- _workspace.SECTIONS.append('DHCPV4') -}}{%- endif -%}
    {%- if _dhcpv6 is defined and _dhcpv6 -%}
      {{- _workspace.SECTIONS.append('DHCPV6') -}}{%- endif -%}
  {%- endif -%}
{%- elif p == 'NAME' and _workspace.MATCH_NAME is none -%}
  {%- set _workspace.MATCH_NAME = v -%}
{%- elif p == 'ADDRESS' and _workspace.ADDRESS is none -%}
  {%- set _workspace.ADDRESS = ((v|bool) | default(False) 
      | ternary( True, False)) -%}
  {%- if _workspace.ADDRESS -%}
    {{- object.SECTION_MAP('ADDRESS', _address) -}}
    {{- _workspace.SECTIONS.append(p) -}}
  {%- endif-%}{# End of if _workspace.ADDRESS #}
{%- elif p == 'GATEWAY' and _workspace.ROUTE is none -%}
  {%- set _workspace.ROUTE = ((v|bool) | default(False) 
      | ternary( True, False)) -%}
  {%- if _workspace.ROUTE -%}
    {{- object.SECTION_MAP('ROUTE', _route) -}}
    {{- _workspace.SECTIONS.append('ROUTE') -}}
  {%- endif-%}{# End of if _workspace.ROUTE #}
{%- elif p == 'NETWORK' and _workspace.NETWORK is none -%}
  {%- set _workspace.NETWORK = ((v|bool) | default(False) 
    | ternary( True, False)) -%}
{%- if _workspace.NETWORK -%}
    {{- object.SECTION_MAP('NETWORK', _network) -}}
    {{- _workspace.SECTIONS.append('NETWORK') -}}
  {%- endif-%}{# End of if _workspace.NETWORK #}
{%- endif -%}{# End of if p == '???' and _workspace.??? is none #}
{%- endmacro -%}
{# ############################################################################
   ############################################################################

  ██╗███╗   ███╗██████╗  ██████╗ ██████╗ ████████╗
  ██║████╗ ████║██╔══██╗██╔═══██╗██╔══██╗╚══██╔══╝
  ██║██╔████╔██║██████╔╝██║   ██║██████╔╝   ██║   
  ██║██║╚██╔╝██║██╔═══╝ ██║   ██║██╔══██╗   ██║   
  ██║██║ ╚═╝ ██║██║     ╚██████╔╝██║  ██║   ██║   
  ╚═╝╚═╝     ╚═╝╚═╝      ╚═════╝ ╚═╝  ╚═╝   ╚═╝  

  ############################################################################
  ############################################################################}
{%- import 'systemd-network.j2' as object with context -%}
{# ############################################################################
   ############################################################################

  ██████╗ ██████╗ ██╗██╗   ██╗ █████╗ ████████╗███████╗               
  ██╔══██╗██╔══██╗██║██║   ██║██╔══██╗╚══██╔══╝██╔════╝               
  ██████╔╝██████╔╝██║██║   ██║███████║   ██║   █████╗                 
  ██╔═══╝ ██╔══██╗██║╚██╗ ██╔╝██╔══██║   ██║   ██╔══╝                 
  ██║     ██║  ██║██║ ╚████╔╝ ██║  ██║   ██║   ███████╗               
  ╚═╝     ╚═╝  ╚═╝╚═╝  ╚═══╝  ╚═╝  ╚═╝   ╚═╝   ╚══════╝               
                                                                    
  ██╗   ██╗ █████╗ ██████╗ ██╗ █████╗ ██████╗ ██╗     ███████╗███████╗
  ██║   ██║██╔══██╗██╔══██╗██║██╔══██╗██╔══██╗██║     ██╔════╝██╔════╝
  ██║   ██║███████║██████╔╝██║███████║██████╔╝██║     █████╗  ███████╗
  ╚██╗ ██╔╝██╔══██║██╔══██╗██║██╔══██║██╔══██╗██║     ██╔══╝  ╚════██║
   ╚████╔╝ ██║  ██║██║  ██║██║██║  ██║██████╔╝███████╗███████╗███████║
    ╚═══╝  ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═════╝ ╚══════╝╚══════╝╚══════╝

  ############################################################################
  ############################################################################}
{%- set _address = {
    'ADDPREFIXROUTE': { 'Name':'AddPrefixRoute', 'Type':'boolean' },
    'ADDRESS': { 'Name':'Address', 'Type':'string' },
    'AUTOJOIN': { 'Name':'AutoJoin', 'Type':'boolean' },
    'BROADCAST': { 'Name':'Broadcast', 'Type':'string' },
    'DUPLICATEADDRESSDETECTION': { 
        'Name':'DuplicateAddressDetection',
        'Type':'string' },
    'HOMEADDRESS': { 'Name':'HomeAddress', 'Type':'boolean' },
    'LABEL': { 'Name':'Label', 'Type':'string' },
    'MANAGETEMPORARYADDRESS': { 
        'Name':'ManageTemporaryAddress',
        'Type':'boolean' },
    'PEER': { 'Name':'Peer', 'Type':'string' },  
    'PREFERREDLIFETIME': { 'Name':'PreferredLifetime', 'Type':'string_number' },
    'SCOPE': { 'Name':'Scope', 'Type':'string_number' }} -%}
{%- set _dhcpv4 = {
    'ANONYMIZE': { 'Name':'Anonymize', 'Type':'boolean' },
    'BLACKLIST': { 'Name':'BlackList', 'Type':'string_list' },
    'CLIENTIDENTIFIER': { 'Name':'ClientIdentifier', 'Type':'string' },
    'DUIDRAWDATA': { 'Name':'DUIDRawData', 'Type':'string' },
    'DUIDTYPE': { 'Name':'DUIDType', 'Type':'string' },
    'HOSTNAME': { 'Name':'Hostname', 'Type':'string' },
    'IAID': { 'Name':'IAID', 'Type':'string' },
    'LISTENPORT': { 'Name':'ListenPort', 'Type':'number' },
    'MAXATTEMPTS': { 'Name':'MaxAttempts', 'Type':'string_number' },
    'REQUESTBROADCAST': { 'Name':'RequestBroadcast', 'Type':'boolean' },
    'REQUESTOPTIONS': { 'Name':'RequestOptions', 'Type':'string_list' },
    'ROUTEMETRIC': { 'Name':'RouteMetric', 'Type':'number' },
    'ROUTEMTUBYTES': { 'Name':'RouteMTUBytes', 'Type':'number' },
    'ROUTETABLE': { 'Name':'RouteTable', 'Type':'number' },
    'ROUTESTODNS': { 'Name':'RoutesToDNS', 'Type':'boolean' },
    'SENDDECLINE': { 'Name':'SendDecline', 'Type':'boolean' },
    'SENDHOSTNAME': { 'Name':'SendHostname', 'Type':'boolean' },
    'SENDOPTION': { 'Name':'SendOption', 'Type':'string' },
    'SENDRELEASE': { 'Name':'SendRelease', 'Type':'boolean' },
    'USEDNS': { 'Name':'UseDNS', 'Type':'boolean' },
    'USEDOMAINS': { 'Name':'UseDomains', 'Type':'string_boolean' },
    'USEHOSTNAME': { 'Name':'UseHostname', 'Type':'boolean' },
    'USEMTU': { 'Name':'UseMTU', 'Type':'boolean' },
    'USENTP': { 'Name':'UseNTP', 'Type':'boolean' },
    'USERCLASS': { 'Name':'UserClass', 'Type':'string_list' },
    'USEROUTES': { 'Name':'UseRoutes', 'Type':'boolean' },
    'USESIP': { 'Name':'UseSIP', 'Type':'boolean' },
    'USETIMEZONE': { 'Name':'UseTimezone', 'Type':'boolean' },
    'VENDORCLASSIDENTIFIER': { 
        'Name':'VendorClassIdentifier',
        'Type':'string' }
    } -%}
{%- set _dhcpv6 = {
    'FORCEDHCPV6PDOTHERINFORMATION': { 
      'Name':'ForceDHCPv6PDOtherInformation',
      'Type':'boolean' },
    'PREFIXDELEGATIONHINT': { 'Name':'PrefixDelegationHint', 'Type':'string' },
    'RAPIDCOMMIT': { 'Name':'RapidCommit', 'Type':'boolean' },
    'USEDNS': { 'Name':'UseDNS', 'Type':'boolean' },
    'USENTP': { 'Name':'UseNTP', 'Type':'boolean' } 
    } -%}
{%- set _link = {
    'ALLMULTICAST': { 'Name':'AllMulticast', 'Type':'boolean' },
    'ARP': { 'Name':'ARP', 'Type':'boolean' },
    'MACADDRESS': { 'Name':'MACAddress', 'Type':'string' },
    'MTUBYTES': { 'Name':'MTUBytes', 'Type':'number' },
    'MULTICAST': { 'Name':'Multicast', 'Type':'boolean' },
    'REQUIREDFORONLINE': { 'Name':'RequiredForOnline', 'Type':'boolean' },
    'UNMANAGED': { 'Name':'Unmanaged', 'Type':'boolean' }
    } -%}
{%- set _match = {
    'ARCHITECTURE': { 'Name':'Architecture', 'Type':'string' },
    'BSSID': { 'Name':'BSSID', 'Type':'string' },
    'DRIVER': { 'Name':'Driver', 'Type':'string' },
    'HOST': { 'Name':'Host', 'Type':'string' },
    'KERNELCOMMANDLINE': { 'Name':'KernelCommandLine', 'Type':'string' },
    'KERNELVERSION': { 'Name':'KernelVersion', 'Type':'string' },
    'MACADDRESS': { 'Name':'MACAddress', 'Type':'list' },
    'NAME': { 'Name':'Name', 'Type':'string' },
    'PATH': { 'Name':'Path', 'Type':'string' },
    'PERMANENTMACADDRESS': { 'Name':'PermanentMACAddress', 'Type':'string' },
    'PROPERTY': { 'Name':'Property', 'Type':'string' },
    'SSID': { 'Name':'SSID', 'Type':'string' },
    'TYPE': { 'Name':'Type', 'Type':'string' },
    'VIRTUALIZATION': { 'Name':'Virtualization', 'Type':'boolean' },
    'WLANINTERFACETYPE': { 'Name':'WLANInterfaceType', 'Type':'string' }
    } -%}
{%- set _network = {
    'ACTIVESLAVE': { 'Name':'ActiveSlave', 'Type':'string' },
    'BINDCARRIER': { 'Name':'BindCarrier', 'Type':'string_list' },
    'BOND': { 'Name':'Bond', 'Type':'string' },
    'BRIDGE': { 'Name':'Bridge', 'Type':'string' },
    'CONFIGUREWITHOUTCARRIER': { 
        'Name':'ConfigureWithoutCarrier',
        'Type':'boolean' },
    'DEFAULTROUTEONDEVICE': { 'Name':'DefaultRouteOnDevice', 'Type':'boolean' },
    'DESCRIPTION': { 'Name':'Description', 'Type':'string' },
    'DHCP': { 'Name':'DHCP', 'Type':'boolean' },
    'DHCPSERVER': { 'Name':'DHCPServer', 'Type':'boolean' },
    'DNS': { 'Name':'DNS', 'Type':'multi' },
    'DNSDEFAULTROUTE': { 'Name':'DNSDefaultRoute', 'Type':'boolean' },
    'DNSOVERTLS': { 'Name':'DNSOverTLS', 'Type':'string_boolean' },
    'DNSSEC': { 'Name':'DNSSEC', 'Type':'string_boolean' },
    'DNSSECNEGATIVETRUSTANCHORS': { 
        'Name':'DNSSECNegativeTrustAnchors',
        'Type':'list' },
    'DOMAINS': { 'Name':'Domains', 'Type':'string_list' },
    'EMITLLDP': { 'Name':'EmitLLDP', 'Type':'string' },
    'IGNORECARRIERLOSS': { 'Name':'IgnoreCarrierLoss', 'Type':'boolean' },
    'IPFORWARD': { 'Name':'IPForward', 'Type':'string_boolean' },
    'IPMASQUERADE': { 'Name':'IPMasquerade', 'Type':'boolean' },
    'IPV4LLROUTE': { 'Name':'IPv4LLRoute', 'Type':'boolean' },
    'IPV4PROXYARP': { 'Name':'IPv4ProxyARP', 'Type':'boolean' },
    'IPV6ACCEPTRA': { 'Name':'IPv6AcceptRA', 'Type':'boolean' },
    'IPV6DUPLICATEADDRESSDETECTION': { 
        'Name':'IPv6DuplicateAddressDetection',
        'Type':'string' },
    'IPV6HOPLIMIT': { 'Name':'IPv6HopLimit', 'Type':'number' },
    'IPV6MTUBYTES': { 'Name':'IPv6MTUBytes', 'Type':'string' },
    'IPV6PREFIXDELEGATION': { 'Name':'IPv6PrefixDelegation', 'Type':'string' },
    'IPV6PRIVACYEXTENSIONS': { 
        'Name':'IPv6PrivacyExtensions',
        'Type':'string_boolean' },
    'IPV6PROXYNDP': { 'Name':'IPv6ProxyNDP', 'Type':'boolean' },
    'IPV6PROXYNDPADDRESS': { 'Name':'IPv6ProxyNDPAddress', 'Type':'multi' },
    'IPV6TOKEN': { 'Name':'IPv6Token', 'Type':'boolean' },
    'IPVLAN': { 'Name':'IPVLAN', 'Type':'multi' },
    'KEEPCONFIGURATION': { 
        'Name':'KeepConfiguration',
        'Type':'string_boolean' },
    'LINKLOCALADDRESSING': { 
        'Name':'LinkLocalAddressing',
        'Type':'string_boolean' },
    'LLDP': { 'Name':'LLDP', 'Type':'string' },
    'LLMNR': { 'Name':'LLMNR', 'Type':'string_boolean' },
    'MACSEC': { 'Name':'MACsec', 'Type':'multi' },
    'MACVLAN': { 'Name':'MACVLAN', 'Type':'multi' },
    'MACVTAP': { 'Name':'MACVTAP', 'Type':'string' },
    'MULTICASTDNS': { 'Name':'MulticastDNS', 'Type':'string_boolean' },
    'NTP': { 'Name':'NTP', 'Type':'multi' },
    'PRIMARYSLAVE': { 'Name':'PrimarySlave', 'Type':'string' },
    'TUNNEL': { 'Name':'Tunnel', 'Type':'multi' },
    'VLAN': { 'Name':'VLAN', 'Type':'multi' },
    'VRF': { 'Name':'VRF', 'Type':'string' },
    'VXLAN': { 'Name':'VXLAN', 'Type':'multi' },
    'XFRM': { 'Name':'Xfrm', 'Type':'multi' } } -%}
{%- set _route = {
    'DESTINATION': { 'Name':'Destination', 'Type':'string' },
    'FASTOPENNOCOOKIE': { 'Name':'FastOpenNoCookie', 'Type':'boolean' },
    'GATEWAY': { 'Name':'Gateway', 'Type':'string' },
    'GATEWAYONLINK': { 'Name':'GatewayOnLink', 'Type':'boolean' },
    'INITIALADVERTISEDRECEIVEWINDOW': { 
        'Name':'InitialAdvertisedReceiveWindow',
        'Type':'string_number' },
    'INITIALCONGESTIONWINDOW': { 
        'Name':'InitialCongestionWindow',
        'Type':'string_number' },
    'IPSERVICETYPE': { 'Name':'IPServiceType', 'Type':'string' },
    'IPV6PREFERENCE': { 'Name':'IPv6Preference', 'Type':'string' },
    'METRIC': { 'Name':'Metric', 'Type':'number' },
    'MTUBYTES': { 'Name':'MTUBytes', 'Type':'number' },
    'MULTIPATHROUTE': { 'Name':'MultiPathRoute', 'Type':'string' },
    'PREFERREDSOURCE': { 'Name':'PreferredSource', 'Type':'string' },
    'PROTOCOL': { 'Name':'Protocol', 'Type':'string_number' },
    'QUICKACK': { 'Name':'QuickAck', 'Type':'boolean' },
    'SCOPE': { 'Name':'Scope', 'Type':'string' },
    'SOURCE': { 'Name':'Source', 'Type':'string' },
    'TABLE': { 'Name':'Table', 'Type':'string' },
    'TTLPROPAGATE': { 'Name':'TTLPropagate', 'Type':'boolean' },
    'TYPE': { 'Name':'Type', 'Type':'string' }} -%}
{%- set _workspace = namespace(
      ADDRESS=none,
      DHCP=none,
      MATCH_NAME= none,
      NETWORK=none,
      ROUTE=none,
      SECTIONS=[ 'MATCH']) -%}
{# ############################################################################
   ############################################################################

  ██████╗ ██████╗  ██████╗  ██████╗███████╗███████╗███████╗
  ██╔══██╗██╔══██╗██╔═══██╗██╔════╝██╔════╝██╔════╝██╔════╝
  ██████╔╝██████╔╝██║   ██║██║     █████╗  ███████╗███████╗
  ██╔═══╝ ██╔══██╗██║   ██║██║     ██╔══╝  ╚════██║╚════██║
  ██║     ██║  ██║╚██████╔╝╚██████╗███████╗███████║███████║
  ╚═╝     ╚═╝  ╚═╝ ╚═════╝  ╚═════╝╚══════╝╚══════╝╚══════╝

  ############################################################################
  ############################################################################}
{# Upload section dictionary into macro SECTION_MAP #}
{%- if _match is defined and _match -%}
  {{- object.SECTION_MAP('MATCH', _match) -}}
{%- endif -%}{#


  # When item.udev is not specified or the boolean value for parameter udev is
  # false then upload the _link dictionary into the macro SECTION_MAP and add
  # the string 'LINK' to the list _workspace.SECTIONS.
#}
{%- if item.udev is not defined or item.udev is false and _link is defined
    and _link -%}
  {{- object.SECTION_MAP('LINK', _link) -}}
  {{- _workspace.SECTIONS.append('LINK') -}}
{%- endif -%}{#


  # Loop through all specified items that are set under systemd_networks
  # to find the key parameter 'DHCP' and to store that boolean into attribute
  # DHCP from the container _workspace.
  # It also checks if the key name 'NAME' exist.
#}
{%- for key, value in item.items() -%}
  {%- set key = key| upper -%}{# Change key to uppercase characters #}
  {%- if _workspace.DHCP is none and value is defined and value is iterable -%}
{# 
    # The attribute 'DHCP' from the container _workspace isn't set.
    # The variable value is set but isn't a boolean object or number object.
    #}
    {%- if key == 'DHCP' and value is not mapping -%}{#
      # The variable key have the string 'DHCP'.
      # The value isn't a dictionary but a list. 
      #}
      {{- PRESET(key, value) -}}
    {%- elif key == 'NETWORK' and value is mapping -%}{#
      # The variable key have the string 'NETWORK'.
      # The value is a dictionary.
      #}
      {%- for k, v in value.items() -%}
        {{- PRESET(k, v) -}}
      {%- endfor -%}
    {%- endif -%}{# End of if key == ??? and value is defined and ... #}
  {%- endif -%}{# End of if _workspace.DHCP is none #}
  {%- if _workspace.MATCH_NAME is none and value is defined 
        and value is iterable -%}{#
    # The attribute 'MATCH_NAME' from the container _workspace isn't set.
    # The variable value is set but isn't a boolean object or number object.
    #}
    {%- if key == 'NAME' and value is string -%}{#
      # The variable key have the string 'NAME'.
      # The variable value is a string object.
      #}
      {{- PRESET(key, value) -}}
    {%- elif key == 'MATCH' and value is mapping -%}{#
      # The variable key have the string 'MATCH'.
      # The variable value is a dictionary.
      #}
      {%- for k, v in value.items() -%}
        {{- PRESET(k, v) -}}
      {%- endfor -%}
    {%- endif -%}{# End of if/elif key == ??? #}
  {%- endif -%}{# End of if _workspace.MATCH_NAME is none and value is ... #}
{%- endfor -%}{# End of for key, value in item.items() #}

{%- for key, value in item.items() -%}
  {%- set key = key| upper -%}{# Change key to uppercase characters #}
  {%- if _workspace.ADDRESS is none and value is iterable and value is defined
        and key == 'ADDRESS'
        and ( _workspace.DHCP is none or _workspace.DHCP is false ) -%}{#
    # The attribute 'ADDRESS' from container _workspace isn't set.
    # The variable key have the string 'ADDRESS'.
    # The attribute 'DHCP' from the container _workspace isn't set OR
    # has the boolean object 'false'.
    #}
    {%- if value is string -%}{#
      # The value variable is a string object. 
      #}
      {{- PRESET(key, True) -}}
    {%- elif value is mapping -%}{#
      # The value variable is a dictionary 
      #}
      {%- for k, v in value.items() -%}{{- PRESET(k, True) -}}{%- endfor -%}
    {%- elif value is not mapping -%}{#
      # The value variable is a list of dictionaries
      #}
      {%- for list in value -%}
        {%- for k, v in list.items() -%}{{- PRESET(k, True) -}}{%- endfor -%}
      {%- endfor -%}
    {%- endif -%}{# End of if/elif value is ???? #}
  {%- elif _workspace.ROUTE is none and value is iterable and value is defined
        and ( key == 'ROUTE' or key in _route.keys() )
        and ( _workspace.DHCP is none or _workspace.DHCP is false ) -%}{#
    # The attribute 'ROUTE' from container _workspace isn't set.
    # The variable key have the string 'ROUTE'.
    # The attribute 'DHCP' from the container _workspace isn't set OR
    # has the boolean object 'false'.
    #}
    {%- if value is string -%}{#
      # The value variable is a string object. 
      #}
      {{- PRESET(key, True) -}}
    {%- elif value is mapping -%}{#
      # The value variable is a dictionary 
      #}
      {%- for k, v in value.items() -%}{{- PRESET(k, True) -}}{%- endfor -%}
    {%- elif value is not mapping -%}{#
      # The value variable is a list of dictionaries
      #}
      {%- for list in value -%}
        {%- for k, v in list.items() -%}{{- PRESET(k, True) -}}{%- endfor -%}
      {%- endfor -%}
    {%- endif -%}{# End of if/elif value is ???? #}
  {%- elif _workspace.NETWORK is none and value is iterable and value is defined
        and ( key == 'NETWORK' or key|upper in _network.keys() ) -%}{#
    # The attribute 'NETWORK' from container _workspace isn't set.
    # The variable key have the string 'NETWORK' or the key exist under 
    # _network.keys.
    #}
    {{- PRESET('NETWORK', True) -}}
  {%- endif -%}{# End of if _workspace.ADDRESS is none and value is ... #}
{%- endfor -%}{# End of for key, value in item.items()


  #####################
  # Upload the section list that is stored under the attribute 'SECTIONS' from
  # the container '_workspace'.   #}
{%- if _workspace.SECTIONS is defined and _workspace.SECTIONS is not none -%}
  {{- object.SET_SECTIONS(_workspace.SECTIONS) -}}
{%- endif -%}{# End of if _workspace.SECTIONS is defined and ... 


  #####################
  # Key 'NAME' was found then set under section '[Match]' the parameter 'Name'
  # with found value string. If key 'NAME' not found found, also specify the
  # parameter 'Name' under section '[Match]' where the value is item.interface.
#}
{%- if _workspace.MATCH_NAME is not none -%}
  {{- object.FIND_KEY( ['MATCH'], 'NAME', _workspace.MATCH_NAME) -}}
{%- else -%}
  {{- object.FIND_KEY( ['MATCH'], 'NAME', item.interface) -}}
{%- endif -%}{# End of if/else _workspace.MATCH_NAME is not none


  #####################
  # Loop through all items
  #}
{%- for key , values in item.items() -%}
  {%- set key = key|upper -%}
  {%- if key != 'INTERFACE' -%}
    {{- object.FIND_KEY(_workspace.SECTIONS, key, values) -}}
  {%- endif -%}{# End of if key != 'INTERFACE' #}
{%- endfor -%}{# End of for key , values in item.items()

  ########################################
  # Begin of DISPLAY                     #
  #                                      #
#}
{%- for section in _workspace.SECTIONS -%}
  {{- object.DISPLAY(section|upper) -}}
{%- endfor -%}